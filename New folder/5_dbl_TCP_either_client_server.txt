#include "ns3/core-module.h"
#include "ns3/network-module.h"
#include "ns3/point-to-point-module.h"
#include "ns3/internet-module.h"
#include "ns3/applications-module.h"

using namespace ns3;

int main(int argc, char *argv[]) {
    NodeContainer nodes;
    nodes.Create(4); // Create 4 nodes (2 clients, 2 servers, n1, n2)

    PointToPointHelper pointToPoint;
    pointToPoint.SetDeviceAttribute("DataRate", StringValue("5Mbps"));
    pointToPoint.SetChannelAttribute("Delay", StringValue("2ms"));

    // Create dumbbell topology
    NetDeviceContainer clientDevices = pointToPoint.Install(nodes.Get(0), nodes.Get(2)); // Client 0 to n1
    NetDeviceContainer clientDevices2 = pointToPoint.Install(nodes.Get(1), nodes.Get(2)); // Client 1 to n1
    NetDeviceContainer serverDevices = pointToPoint.Install(nodes.Get(3), nodes.Get(2)); // Server 3 to n2
    NetDeviceContainer serverDevices2 = pointToPoint.Install(nodes.Get(4), nodes.Get(2)); // Server 4 to n2
    NetDeviceContainer routerDevices = pointToPoint.Install(nodes.Get(2), nodes.Get(1)); // n1 to n2

    InternetStackHelper stack;
    stack.Install(nodes);

    Ipv4AddressHelper address;
    address.SetBase("10.1.1.0", "255.255.255.0");
    address.Assign(clientDevices);
    address.Assign(clientDevices2);
    address.SetBase("10.1.2.0", "255.255.255.0");
    address.Assign(serverDevices);
    address.Assign(serverDevices2);
    address.SetBase("10.1.3.0", "255.255.255.0");
    address.Assign(routerDevices);

    // TCP server (on server node 4)
    PacketSinkHelper sink("ns3::TcpSocketFactory", InetSocketAddress(Ipv4Address::GetAny(), 9));
    ApplicationContainer serverApps = sink.Install(nodes.Get(4));
    serverApps.Start(Seconds(1.0));
    serverApps.Stop(Seconds(10.0));

    // TCP client (on client node 0)
    uint16_t port = 9;
    OnOffHelper onoff("ns3::TcpSocketFactory", Address(InetSocketAddress(interfaces.GetAddress(4), port)));
    onoff.SetConstantRate(DataRate("1Mbps"));
    onoff.SetAttribute("PacketSize", UintegerValue(1024));
    ApplicationContainer clientApps = onoff.Install(nodes.Get(0));
    clientApps.Start(Seconds(2.0));
    clientApps.Stop(Seconds(10.0));

    Simulator::Run();
    Simulator::Destroy();
    return 0;
}
