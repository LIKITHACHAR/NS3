#include "ns3/core-module.h"
#include "ns3/network-module.h"
#include "ns3/internet-module.h"
#include "ns3/point-to-point-module.h"
#include "ns3/applications-module.h"
#include "ns3/flow-monitor-module.h"
#include "ns3/gnuplot.h"

using namespace ns3;

int main(int argc, char *argv[]) {
    NodeContainer nodes;
    nodes.Create(6);

    PointToPointHelper pointToPoint;
    pointToPoint.SetDeviceAttribute("DataRate", StringValue("5Mbps"));
    pointToPoint.SetChannelAttribute("Delay", StringValue("2ms"));

    NetDeviceContainer devices;
    devices = pointToPoint.Install(nodes.Get(0), nodes.Get(1));
    devices = pointToPoint.Install(nodes.Get(1), nodes.Get(4));
    devices = pointToPoint.Install(nodes.Get(2), nodes.Get(1));
    devices = pointToPoint.Install(nodes.Get(3), nodes.Get(4));
    devices = pointToPoint.Install(nodes.Get(4), nodes.Get(5));

    InternetStackHelper stack;
    stack.Install(nodes);

    Ipv4AddressHelper address;
    address.SetBase("10.1.1.0", "255.255.255.0");
    Ipv4InterfaceContainer interfaces = address.Assign(devices);

    // Application setup (TCP flows starting at 1 second)
    uint16_t port = 9;
    OnOffHelper onoff1("ns3::TcpSocketFactory", Address(InetSocketAddress(interfaces.GetAddress(5), port)));
    onoff1.SetConstantRate(DataRate("1Mbps"));
    onoff1.SetAttribute("PacketSize", UintegerValue(1024));
    ApplicationContainer clientApps1 = onoff1.Install(nodes.Get(0));

    PacketSinkHelper sink1("ns3::TcpSocketFactory", Address(InetSocketAddress(Ipv4Address::GetAny(), port)));
    ApplicationContainer serverApps1 = sink1.Install(nodes.Get(5));

    clientApps1.Start(Seconds(1.0));  // Start at 1 second
    clientApps1.Stop(Seconds(10.0));
    serverApps1.Start(Seconds(1.0));

    uint16_t port2 = port + 1;
    OnOffHelper onoff2("ns3::TcpSocketFactory", Address(InetSocketAddress(interfaces.GetAddress(5), port2)));
    onoff2.SetConstantRate(DataRate("1Mbps"));
    onoff2.SetAttribute("PacketSize", UintegerValue(1024));
    ApplicationContainer clientApps2 = onoff2.Install(nodes.Get(2));

    PacketSinkHelper sink2("ns3::TcpSocketFactory", Address(InetSocketAddress(Ipv4Address::GetAny(), port2)));
    ApplicationContainer serverApps2 = sink2.Install(nodes.Get(5));

    clientApps2.Start(Seconds(1.0));  // Start at 1 second
    clientApps2.Stop(Seconds(10.0));
    serverApps2.Start(Seconds(1.0));

    // Flow monitor
    FlowMonitorHelper flowmon;
    Ptr<FlowMonitor> monitor = flowmon.InstallAll();

    Simulator::Stop(Seconds(10.0));
    Simulator::Run();

    monitor->CheckForLostPackets();

    Ptr<Ipv4FlowClassifier> classifier = DynamicCast<Ipv4FlowClassifier>(flowmon.GetClassifier());
    FlowMonitor::FlowStatsContainer stats = monitor->GetFlowStats();

    // Gather received packets per time interval
    std::map<double, uint32_t> timeIntervalPacketCounts;
    double intervalStart = 0.0;
    for (std::map<FlowId, FlowMonitor::FlowStats>::const_iterator i= stats.begin(); i != stats.end(); ++i) {
        Time startTime = i->second.timeFirstTxPacket.GetSeconds();
        Time endTime = i->second.timeLastRxPacket.GetSeconds();
        for (Time time = startTime; time <= endTime; time += Seconds(1.0)) {  // Gather in 1-second intervals
            double interval = time.GetSeconds();
            if (interval > intervalStart) {
                timeIntervalPacketCounts[intervalStart] = 0;  // Initialize for new intervals
                intervalStart = interval;
            }
            timeIntervalPacketCounts[interval] += i->second.rxPackets;
        }
    }

    // Plotting
    Gnuplot plot = Gnuplot("packets-received-per-interval.png");
    plot.SetTitle("Received Packets per Time Interval");
    plot.SetTerminal("png");

    std::vector<double> xValues;
    std::vector<double> packetCounts;

    for (const auto& timeIntervalData : timeIntervalPacketCounts) {
        xValues.push_back(timeIntervalData.first);  // Time interval
        packetCounts.push_back(timeIntervalData.second);  // Packets received in that interval
    }

    plot.AddDataset(packetCounts).SetStyle("linespoints").SetTitle("Packets Received");
    plot.AddDataset(xValues).SetStyle("linespoints").SetTitle("Time Interval");  // Add x-axis values for clarity

    plot.Plot();

    Simulator::Destroy();
    return 0;
}

