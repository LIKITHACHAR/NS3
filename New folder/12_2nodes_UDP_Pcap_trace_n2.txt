#include "ns3/core-module.h"
#include "ns3/network-module.h"
#include "ns3/mobility-module.h"
#include "ns3/wifi-module.h"
#include "ns3/internet-module.h"
#include "ns3/olsr-helper.h"
#include "ns3/applications-module.h"
#include "ns3/flow-monitor-helper.h"
#include "ns3/gnuplot.h"

using namespace ns3;

// Function to plot received bytes vs time
void PlotReceivedBytes(Ptr<FlowMonitor> flowMonitor, uint32_t flowId) {
    // ... (Gnuplot code for plotting)
}

int main(int argc, char *argv[]) {
    NodeContainer nodes;
    nodes.Create(3); // Create 3 nodes

    // ... (network setup, mobility, OLSR, and UDP applications)

    // Flow monitor configuration
    FlowMonitorHelper flowMonitorHelper;
    Ptr<FlowMonitor> flowMonitor = flowMonitorHelper.InstallAll();

    // Enable pcap tracing for node n2's WiFi interface
    std::string traceFile = "node2-wifi-trace.pcap";
    wifi.EnablePcapAll(traceFile);

    Simulator::Run();

    flowMonitor->CheckForLostPackets();
    Ptr<Ipv4FlowClassifier> classifier = DynamicCast<Ipv4FlowClassifier>(flowMonitorHelper.GetClassifier());
    uint32_t flowId = 0; // Find flow ID for n1 -> n2 traffic

    PlotReceivedBytes(flowMonitor, flowId);

    Simulator::Destroy();
    return 0;
}
