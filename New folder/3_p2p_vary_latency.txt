#include "ns3/core-module.h"
#include "ns3/network-module.h"
#include "ns3/point-to-point-module.h"
#include "ns3/internet-module.h"
#include "ns3/applications-module.h"
#include "ns3/flow-monitor-helper.h"
#include "ns3/ipv4-flow-classifier.h"

using namespace ns3;

int main(int argc, char *argv[]) {
    NodeContainer nodes;
    nodes.Create(2);

    PointToPointHelper pointToPoint;
    pointToPoint.SetDeviceAttribute("DataRate", StringValue("5Mbps"));

    // Vary latency in multiples of 2ms
    for (uint32_t latency = 2; latency <= 10; latency += 2) {
        pointToPoint.SetChannelAttribute("Delay", StringValue(std::to_string(latency) + "ms"));

        NetDeviceContainer devices = pointToPoint.Install(nodes);

        InternetStackHelper stack;
        stack.Install(nodes);

        Ipv4AddressHelper address;
        address.SetBase("10.1.1.0", "255.255.255.0");
        Ipv4InterfaceContainer interfaces = address.Assign(devices);

        uint16_t port = 9;

        // UDP Server
        UdpServerHelper server(port);
        ApplicationContainer serverApps = server.Install(nodes.Get(1));
        serverApps.Start(Seconds(1.0));
        serverApps.Stop(Seconds(10.0));

        // UDP Client
        UdpClientHelper client(interfaces.GetAddress(1), port);
        client.SetAttribute("MaxPackets", UintegerValue(100));  // Send more packets for accurate measurement
        client.SetAttribute("Interval", TimeValue(Seconds(0.1)));  // Send packets more frequently
        client.SetAttribute("PacketSize", UintegerValue(1024));

        ApplicationContainer clientApps = client.Install(nodes.Get(0));
        clientApps.Start(Seconds(2.0));
        clientApps.Stop(Seconds(10.0));

        // Flow Monitor
        FlowMonitorHelper flowMonitorHelper;
        Ptr<FlowMonitor> flowMonitor = flowMonitorHelper.InstallAll();

        Simulator::Run();

        flowMonitor->CheckForLostPackets();

        Ptr<Ipv4FlowClassifier> classifier = DynamicCast<Ipv4FlowClassifier>(flowMonitorHelper.GetClassifier());
        FlowMonitor::FlowStatsContainer stats = flowMonitor->GetFlowStats();

        for (const auto &flowStats : stats) {
            Ipv4FlowClassifier::FiveTuple t = classifier->FindFlow(flowStats.first);
            std::cout << "Latency: " << latency << "ms, Throughput: "
                      << flowStats.second.rxBytes * 8.0 / (flowStats.second.timeLastRxPacket.GetSeconds() - flowStats.second.timeFirstTxPacket.GetSeconds()) / 1024 / 1024 << " Mbps" << std::endl;
        }

        flowMonitor->SerializeToXmlFile("flow_monitor.xml", true, true);

        Simulator::Destroy();
    }

    return 0;
}
