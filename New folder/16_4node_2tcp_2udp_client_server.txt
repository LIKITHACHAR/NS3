#include "ns3/core-module.h"
#include "ns3/network-module.h"
#include "ns3/internet-module.h"
#include "ns3/point-to-point-module.h"
#include "ns3/applications-module.h"

using namespace ns3;

int main(int argc, char *argv[]) {
    NodeContainer nodes;
    nodes.Create(4);

    PointToPointHelper pointToPoint;
    pointToPoint.SetDeviceAttribute("DataRate", StringValue("5Mbps"));
    pointToPoint.SetChannelAttribute("Delay", StringValue("2ms"));

    NetDeviceContainer devices = pointToPoint.Install(nodes);

    InternetStackHelper stack;
    stack.Install(nodes);

    Ipv4AddressHelper address;
    address.SetBase("10.1.1.0", "255.255.255.0");
    Ipv4InterfaceContainer interfaces = address.Assign(devices);

    // TCP server and client (nodes 0 and 1)
    uint16_t port = 9;
    OnOffHelper onoff("ns3::TcpSocketFactory", Address(InetSocketAddress(interfaces.GetAddress(1), port)));
    onoff.SetConstantRate(DataRate("1Mbps"));
    onoff.SetAttribute("PacketSize", UintegerValue(1024));
    ApplicationContainer clientApps = onoff.Install(nodes.Get(0));

    PacketSinkHelper sink("ns3::TcpSocketFactory", Address(InetSocketAddress(Ipv4Address::GetAny(), port)));
    ApplicationContainer serverApps = sink.Install(nodes.Get(1));

    serverApps.Start(Seconds(1.0));
    clientApps.Start(Seconds(2.0));
    clientApps.Stop(Seconds(10.0));

    // UDP server and client (nodes 2 and 3)
    port = 10;
    UdpServerHelper server(port);
    ApplicationContainer udpServerApps = server.Install(nodes.Get(2));

    OnOffHelper udpOnoff("ns3::UdpSocketFactory", Address(InetSocketAddress(interfaces.GetAddress(3), port)));
    udpOnoff.SetConstantRate(DataRate("1Mbps"));
    udpOnoff.SetAttribute("PacketSize", UintegerValue(1024));
    ApplicationContainer udpClientApps = udpOnoff.Install(nodes.Get(3));

    udpServerApps.Start(Seconds(1.0));
    udpClientApps.Start(Seconds(2.0));
    udpClientApps.Stop(Seconds(10.0));

    Simulator::Run();
    Simulator::Destroy();
    return 0;
}
